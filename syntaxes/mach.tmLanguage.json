{
    "scopeName": "source.mach",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#types"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#characters"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#identifiers"
        },
        {
            "include": "#operators"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.hash.mach",
                    "match": "#.*$"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.mach",
                    "match": "\\b(mod|use|ext|def|fun|val|var|if|or|for|brk|cnt|ret|asm|try|pass|fail|struct|union|new)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "storage.type.mach",
                    "match": "\\b(u8|u16|u32|u64|i8|i16|i32|i64|f32|f64|str|void|nil)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.mach",
                    "begin": "\"",
                    "end": "\""
                }
            ]
        },
        "characters": {
            "patterns": [
                {
                    "name": "constant.character.mach",
                    "begin": "'",
                    "end": "'"
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.mach",
                    "match": "\\b(0x[0-9A-Fa-f_]+|0b[01_]+|0o[0-7_]+|\\d+(_*\\d+)*\\.?\\d*)\\b"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.declaration.mach",
                    "match": "\\b(def|ext)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*:\\s*fun\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.control.mach"
                        },
                        "2": {
                            "name": "entity.name.function.mach"
                        }
                    }
                },
                {
                    "name": "entity.name.function.definition.mach",
                    "match": "\\b(fun)\\s+([a-zA-Z_][a-zA-Z0-9_]*)(?:<([a-zA-Z_][a-zA-Z0-9_]*)>)?\\s*\\(",
                    "captures": {
                        "1": {
                            "name": "keyword.control.mach"
                        },
                        "2": {
                            "name": "entity.name.function.mach"
                        },
                        "3": {
                            "name": "entity.name.generic.mach"
                        }
                    }
                },
                {
                    "name": "entity.name.function.call.mach",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.call.mach"
                        }
                    }
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "name": "variable.other.mach",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.mach",
                    "match": "\\+|\\-|\\*|\\/|%|==|!=|<|<=|>|>=|&&|\\|\\||!|~|@|\\?"
                }
            ]
        }
    }
}
